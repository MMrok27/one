from typing import Any, List, Callable, Optional
import graphviz


class BinaryNode:
    value: Any
    left_child: Optional['BinaryNode']
    right_child: Optional['BinaryNode']

    def __init__(self, val):
        self.value = val
        self.left_child = None
        self.right_child = None

    def __str__(self) -> str:
        return str(self.value)

    def min(self) -> 'BinaryNode':
        if self.left_child is None:
            return self
        return self.left_child.min()

    def traverse_in_order(self, visit: Callable[[Any], None]):
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        visit(self)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)

    def add_edges(self, dot: graphviz.Digraph):
        if self.left_child is not None:
            dot.edge(str(self), str(self.left_child))
        if self.right_child is not None:
            dot.edge(str(self), str(self.right_child))


class BinarySearchTree:
    root: BinaryNode

    def _insert(self, node: BinaryNode, value: Any) -> BinaryNode:
        if value < node.value:
            if node.left_child is None:
                node.left_child = BinaryNode(value)
                return node.left_child
            return self._insert(node.left_child, value)
        if node.right_child is None:
            node.right_child = BinaryNode(value)
            return node.right_child
        return self._insert(node.right_child, value)

    def insert(self, value: Any) -> None:
        self._insert(self.root, value)

    def insert_list(self, list_: List[Any]):
        for i in list_:
            self.insert(i)

    def contains(self, value: Any) -> bool:
        cur = self.root
        while cur.left_child is not None or cur.right_child is not None:
            if cur.value == value:
                return True
            if cur.value > value:
                cur = cur.left_child
            else:
                cur = cur.right_child
        return cur.value == value

    def remove(self, value: Any):
        self._remove(self.root, value)

    def _remove(self, node: BinaryNode, val: Any):
        print(node.value)
        if val == node.value:
            if node.left_child is None:
                return node.right_child
            if node.right_child is None:
                return node.left_child
            node.value = node.right_child.min().value
            node.right_child = self._remove(node.right_child, node.right_child.value)
        if val < node.value:
            node.left_child = self._remove(node.left_child, val)
        if val > node.value:
            node.right_child = self._remove(node.right_child, val)
        return node

    def show(self):
        dot = graphviz.Digraph('Graph')
        self.root.traverse_in_order(lambda x: dot.node(str(x), str(x)))
        self.root.traverse_in_order(lambda x: x.add_edges(dot))
        print(dot.source)


def main():
    tree = BinarySearchTree()
    tree.root = BinaryNode(8)
    tree.insert_list([3, 1, 6, 4, 7, 10, 14, 13])
    print(tree.contains(6))
    tree.remove(8)
    tree.show()


if __name__ == '__main__':
    main()
